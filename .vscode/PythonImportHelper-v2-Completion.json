[
    {
        "label": "Document",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "DateTimeField",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "BooleanField",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "ListField",
        "importPath": "mongoengine",
        "description": "mongoengine",
        "isExtraImport": true,
        "detail": "mongoengine",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "dumps",
        "importPath": "bson.json_util",
        "description": "bson.json_util",
        "isExtraImport": true,
        "detail": "bson.json_util",
        "documentation": {}
    },
    {
        "label": "Note",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "class User(Document):\n    fullName = StringField(required=True)\n    email = StringField(required=True)\n    password = StringField(required=True)\n    created_on = DateTimeField(default=datetime.datetime.now)\nclass Note(Document):\n    title = StringField(required=True)\n    content = StringField(required=True)\n    tags = ListField(StringField(), default=[])\n    isPinned = BooleanField(default=False)",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "Note",
        "kind": 6,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "class Note(Document):\n    title = StringField(required=True)\n    content = StringField(required=True)\n    tags = ListField(StringField(), default=[])\n    isPinned = BooleanField(default=False)\n    userId = StringField(required=True)\n    created_on = DateTimeField(default=datetime.datetime.now)",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "backend.server",
        "description": "backend.server",
        "peekOfCode": "def hello():\n    return jsonify({\"data\": \"hello\"})\n@app.route('/create-account', methods=['POST'])\ndef create_account():\n    try:\n        data = request.get_json()\n        if not data:\n            return jsonify({'error': True, 'message': 'Invalid JSON format'}), 400\n        full_name = data.get('fullName')\n        email = data.get('email')",
        "detail": "backend.server",
        "documentation": {}
    },
    {
        "label": "create_account",
        "kind": 2,
        "importPath": "backend.server",
        "description": "backend.server",
        "peekOfCode": "def create_account():\n    try:\n        data = request.get_json()\n        if not data:\n            return jsonify({'error': True, 'message': 'Invalid JSON format'}), 400\n        full_name = data.get('fullName')\n        email = data.get('email')\n        password = data.get('password')\n        if not full_name:\n            return jsonify({'error': True, 'message': 'Full Name is required'}), 400",
        "detail": "backend.server",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "backend.server",
        "description": "backend.server",
        "peekOfCode": "def login():\n    try:\n        data = request.get_json()\n        if not data:\n            return jsonify({'error': True, 'message': 'Invalid JSON format'}), 400\n        email = data.get('email')\n        password = data.get('password')\n        if not email:\n            return jsonify({'error': True, 'message': 'Email is required'}), 400\n        if not password:",
        "detail": "backend.server",
        "documentation": {}
    },
    {
        "label": "get_users",
        "kind": 2,
        "importPath": "backend.server",
        "description": "backend.server",
        "peekOfCode": "def get_users():\n    try:\n        all_users = list(users.find({}))\n        # Convert ObjectId to string for JSON serialization\n        for user in all_users:\n            user['_id'] = str(user['_id'])\n        return jsonify({'error': False, 'users': all_users}), 200\n    except Exception as e:\n        return jsonify({'error': True, 'message': str(e)}), 500\n@app.route('/add-note', methods=['POST'])",
        "detail": "backend.server",
        "documentation": {}
    },
    {
        "label": "add_note",
        "kind": 2,
        "importPath": "backend.server",
        "description": "backend.server",
        "peekOfCode": "def add_note():\n    try:\n        data = request.json\n        title = data.get('title')\n        content = data.get('content')\n        tags = data.get('tags', [])\n        user_id = data.get('user_id')\n        isPinned = data.get('ispinned', False)\n        if not title:\n            return jsonify({'error': True, 'message': 'Title is required'}), 400",
        "detail": "backend.server",
        "documentation": {}
    },
    {
        "label": "edit_note",
        "kind": 2,
        "importPath": "backend.server",
        "description": "backend.server",
        "peekOfCode": "def edit_note(note_id):\n    try:\n        data = request.json\n        title = data.get('title')\n        content = data.get('content')\n        tags = data.get('tags', [])\n        user_id = data.get('user_id')\n        isPinned = data.get('ispinned', False)\n        if not title and not content and not tags and not user_id and not isPinned:\n            return jsonify({'error': True, 'message': 'No data provided for update'}), 400",
        "detail": "backend.server",
        "documentation": {}
    },
    {
        "label": "get_notes",
        "kind": 2,
        "importPath": "backend.server",
        "description": "backend.server",
        "peekOfCode": "def get_notes():\n    try:\n        all_notes = list(notes_collection.find({}))\n        # Convert ObjectId to string for JSON serialization\n        serialized_notes = dumps(all_notes)\n        # Convert JSON string to Python dictionary\n        notes_dict = json.loads(serialized_notes)\n        return jsonify({'error': False, 'notes': notes_dict}), 200\n    except Exception as e:\n        return jsonify({'error': True, 'message': str(e)}), 500",
        "detail": "backend.server",
        "documentation": {}
    },
    {
        "label": "delete_note",
        "kind": 2,
        "importPath": "backend.server",
        "description": "backend.server",
        "peekOfCode": "def delete_note(note_id):\n    try:\n        note = notes_collection.find_one({'_id': ObjectId(note_id)})\n        if not note:\n            return jsonify({'error': True, 'message': 'Note not found'}), 404\n        result = notes_collection.delete_one({'_id': ObjectId(note_id)})\n        if result.deleted_count == 1:\n            return jsonify({'error': False, 'message': 'Note deleted successfully'}), 200\n        else:\n            return jsonify({'error': True, 'message': 'Failed to delete note'}), 500",
        "detail": "backend.server",
        "documentation": {}
    },
    {
        "label": "update_pinned",
        "kind": 2,
        "importPath": "backend.server",
        "description": "backend.server",
        "peekOfCode": "def update_pinned(note_id):\n    try:\n        data = request.json\n        is_pinned = data.get('isPinned')\n        note = notes_collection.find_one({'_id': ObjectId(note_id)})\n        if not note:\n            return jsonify({'error': True, 'message': 'Note not found'}), 404\n        result = notes_collection.update_one(\n            {'_id': ObjectId(note_id)},\n            {'$set': {'isPinned': is_pinned}}",
        "detail": "backend.server",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.server",
        "description": "backend.server",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\nMONGO_URI = os.getenv(\"MONGO_URI\")\nclient = MongoClient(MONGO_URI)\ndb = client.get_database(\"Fast-Note-Database\")\nusers = db['users']\nnotes_collection = db['notes']\napp.config['SECRET_KEY'] = os.getenv('ACCESS_TOKEN_SECRET')\n@app.route(\"/\")\ndef hello():",
        "detail": "backend.server",
        "documentation": {}
    },
    {
        "label": "MONGO_URI",
        "kind": 5,
        "importPath": "backend.server",
        "description": "backend.server",
        "peekOfCode": "MONGO_URI = os.getenv(\"MONGO_URI\")\nclient = MongoClient(MONGO_URI)\ndb = client.get_database(\"Fast-Note-Database\")\nusers = db['users']\nnotes_collection = db['notes']\napp.config['SECRET_KEY'] = os.getenv('ACCESS_TOKEN_SECRET')\n@app.route(\"/\")\ndef hello():\n    return jsonify({\"data\": \"hello\"})\n@app.route('/create-account', methods=['POST'])",
        "detail": "backend.server",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "backend.server",
        "description": "backend.server",
        "peekOfCode": "client = MongoClient(MONGO_URI)\ndb = client.get_database(\"Fast-Note-Database\")\nusers = db['users']\nnotes_collection = db['notes']\napp.config['SECRET_KEY'] = os.getenv('ACCESS_TOKEN_SECRET')\n@app.route(\"/\")\ndef hello():\n    return jsonify({\"data\": \"hello\"})\n@app.route('/create-account', methods=['POST'])\ndef create_account():",
        "detail": "backend.server",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "backend.server",
        "description": "backend.server",
        "peekOfCode": "db = client.get_database(\"Fast-Note-Database\")\nusers = db['users']\nnotes_collection = db['notes']\napp.config['SECRET_KEY'] = os.getenv('ACCESS_TOKEN_SECRET')\n@app.route(\"/\")\ndef hello():\n    return jsonify({\"data\": \"hello\"})\n@app.route('/create-account', methods=['POST'])\ndef create_account():\n    try:",
        "detail": "backend.server",
        "documentation": {}
    },
    {
        "label": "users",
        "kind": 5,
        "importPath": "backend.server",
        "description": "backend.server",
        "peekOfCode": "users = db['users']\nnotes_collection = db['notes']\napp.config['SECRET_KEY'] = os.getenv('ACCESS_TOKEN_SECRET')\n@app.route(\"/\")\ndef hello():\n    return jsonify({\"data\": \"hello\"})\n@app.route('/create-account', methods=['POST'])\ndef create_account():\n    try:\n        data = request.get_json()",
        "detail": "backend.server",
        "documentation": {}
    },
    {
        "label": "notes_collection",
        "kind": 5,
        "importPath": "backend.server",
        "description": "backend.server",
        "peekOfCode": "notes_collection = db['notes']\napp.config['SECRET_KEY'] = os.getenv('ACCESS_TOKEN_SECRET')\n@app.route(\"/\")\ndef hello():\n    return jsonify({\"data\": \"hello\"})\n@app.route('/create-account', methods=['POST'])\ndef create_account():\n    try:\n        data = request.get_json()\n        if not data:",
        "detail": "backend.server",
        "documentation": {}
    },
    {
        "label": "app.config['SECRET_KEY']",
        "kind": 5,
        "importPath": "backend.server",
        "description": "backend.server",
        "peekOfCode": "app.config['SECRET_KEY'] = os.getenv('ACCESS_TOKEN_SECRET')\n@app.route(\"/\")\ndef hello():\n    return jsonify({\"data\": \"hello\"})\n@app.route('/create-account', methods=['POST'])\ndef create_account():\n    try:\n        data = request.get_json()\n        if not data:\n            return jsonify({'error': True, 'message': 'Invalid JSON format'}), 400",
        "detail": "backend.server",
        "documentation": {}
    },
    {
        "label": "authenticate_token",
        "kind": 2,
        "importPath": "backend.utilities",
        "description": "backend.utilities",
        "peekOfCode": "def authenticate_token(req):\n    auth_header = req.headers.get(\"Authorization\")\n    if not auth_header:\n        return None\n    token = auth_header.split(\" \")[1]\n    if not token:\n        return None\n    try:\n        decoded_token = jwt.decode(token, os.getenv(\"ACCESS_TOKEN_SECRET\"))\n        return decoded_token",
        "detail": "backend.utilities",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    }
]